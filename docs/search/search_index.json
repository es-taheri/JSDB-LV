{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 JSONDB-LV is an easier way for use JSONDB ( HV / SV ) in different programming languages. By the way currently only PHP language supported in this library. (Other languages will be added soon... Note JSONDB-LV isn't a database. It's an asynchronous library for use and connect to jsondb ( HV / SV ) with only a few lines code. Features \u00b6 Asynchronous Library This library coded very clean and asynchronous for faster calculations More info A few lines Send requests to jsondb with only a few lines of code More info One For All This library supports all functional requests for both JSONDB-HV & JSONDB-SV More info Open Source, MIT JSONDB-LV is licensed under MIT and also available on GitHub More info Why should I use JSONDB-LV? \u00b6 We know that JSONDB supports rest api and web stream socket but we think about it that MYSQL has query too but every developer must write his own library or type each queries in many lines of code. It happens in JSONDB too , We mean that you should write your library or write a many lines of code for sending a request and it maybe make you tired so we developed JSONDB-LV for making your codes free from many lines of code only for sending a simple request to JSONDB-HV/SV. And also we added \u00b6 Some better features in this library for make it more useful See useful features Here you are ready! \u00b6 Let's have some fun with this library Click Here For Getting Started","title":"JSONDB-LV | An easy to use library for JSONDB"},{"location":"#home","text":"JSONDB-LV is an easier way for use JSONDB ( HV / SV ) in different programming languages. By the way currently only PHP language supported in this library. (Other languages will be added soon... Note JSONDB-LV isn't a database. It's an asynchronous library for use and connect to jsondb ( HV / SV ) with only a few lines code.","title":"Home"},{"location":"#features","text":"Asynchronous Library This library coded very clean and asynchronous for faster calculations More info A few lines Send requests to jsondb with only a few lines of code More info One For All This library supports all functional requests for both JSONDB-HV & JSONDB-SV More info Open Source, MIT JSONDB-LV is licensed under MIT and also available on GitHub More info","title":"Features"},{"location":"#why-should-i-use-jsondb-lv","text":"We know that JSONDB supports rest api and web stream socket but we think about it that MYSQL has query too but every developer must write his own library or type each queries in many lines of code. It happens in JSONDB too , We mean that you should write your library or write a many lines of code for sending a request and it maybe make you tired so we developed JSONDB-LV for making your codes free from many lines of code only for sending a simple request to JSONDB-HV/SV.","title":"Why should I use JSONDB-LV?"},{"location":"#and-also-we-added","text":"Some better features in this library for make it more useful See useful features","title":"And also we added"},{"location":"#here-you-are-ready","text":"Let's have some fun with this library Click Here For Getting Started","title":"Here you are ready!"},{"location":"classes/","text":"Classes \u00b6 Here we have listed all classes with their parameters and returned value and how to use them. SHORTLY : Fast & Small document of all classes! How to load and use classes? \u00b6 All classes have their own namespace and each one is in the file named as their name. You can load classes with calling them on top of your codes. Step By Step - Define Method \u00b6 We include jsondb file witch automatically load classes by their definition on codes! <?php //including composer autoload include 'vendor/autoload.php' ; We define class on top of codes. (For example : USER ) <?php // In this case we use the original name of class. use JSONDB\\request\\user ; // In other case you can set specific name for class usage in your code! use JSONDB\\request\\user as account ; We call to class defined on top of code. <?php // Call class we defined with original name $user = new user ( $username , $password ); // Call class we defined with specific name $user = new account ( $username , $password ); Now we can call any function from class and use it. <?php var_dump ( $user -> login ()); var_dump ( $user -> get ( 'lastLogin' )); ... Step By Step - Direct Method \u00b6 We include jsondb file witch automatically load classes by calling them on codes! <?php //including composer autoload include 'vendor/autoload.php' ; We call to class with full namespace. <?php // Call class directly with full namespace $user = new JSONDB\\request\\user ( $username , $password ); Now we can call any function from class and use it. <?php var_dump ( $user -> login ()); var_dump ( $user -> get ( 'lastLogin' )); ... List of Classes \u00b6 Class Parameter Description CONNECT $server_type , $address , $port , $timeout , $proxy string , string , int , int , array Create a connection from library to jsondb server/host by curl USER $username , $password , $output string , string , string / null Send user section request to jsondb server/host by curl DATABASE $output string / null Send database section request to jsondb server/host by curl BASE $output string / null Send base section request to jsondb server/host by curl DATACENTER $output string / null Send datacenter section request to jsondb server/host by curl JSONDB\\lib\\connect \u00b6 Info This class is only for verify the server and create connection to server. Other classes don't work without accepting and connecting to server by this class! Functions Parameters Description ------- ----------------- ------------------------------------------ JSONDB\\request\\user \u00b6 Functions Parameters Description rapid_login $save_session boolean Send a rapid login request to jsondb server/host. login $save_session boolean Send a login request to jsondb server/host. In this method of login it takes a little more time to login continue $session_id string / null Continue last login using last session id or entered session id terminate ---------------------- Terminate current session id (if you use this function you must login again) update $what , $set , $username string / array , string / array , string / null Update current or another user info get $what string / array Get current user info create $username , $password , $type , $active string , string , string , boolean Get current user info delete $username string Delete a user JSONDB\\request\\database \u00b6 Functions Parameters Description select $name string Select a database build $name , $maxsize , $maxbase , $users , $comment , $encrypt , $select string , integer , integer , array / null , string / null , boolean , boolean Build a new database modify $what , $set string / array , string / array Modify database setting obtain $what string / array Obtain database setting delete $what , $set , $username string / array , string / array , string / null Delete current selected database clean $what string / array Clean current selected database export $save_file , $path_to_save boolean , string / null Export current selected database import $source string Import a database JSONDB\\request\\base \u00b6 Functions Parameters Description select $name string Select a base create $name , $maxrecord , $comment , $encrypt , $select string , integer , string / null , boolean , boolean Create a new base modify $what , $set string / array , string / array Modify base setting obtain $what string / array Obtain base setting delete $what , $set , $username string / array , string / array , string / null Delete current selected base clean $what string / array Clean current selected base export $save_file , $path_to_save boolean , string / null Export current selected base import $source string Import a base JSONDB\\request\\datacenter \u00b6 Functions Parameters Description replace $object , $value , $where_object , $where_value , $limit string / array , string / array , string / array / null , string / array / null , integer / null Replace/add data to record(s) receive $object , $where_object , $where_value , $limit string / array , string / array / null , string / array / null , integer / null Receive data from record(s) add $object , $value string / array , string / array Add a record delete $id , $where_object , $where_value , $limit integer / array / string , string / array / null , string / array / null , integer / null Delete record(s) remove $object , $where_object , $where_value , $limit string / array , string / array / null , string / array / null , integer / null Remove data from record(s)","title":"Classes"},{"location":"classes/#classes","text":"Here we have listed all classes with their parameters and returned value and how to use them. SHORTLY : Fast & Small document of all classes!","title":"Classes"},{"location":"classes/#how-to-load-and-use-classes","text":"All classes have their own namespace and each one is in the file named as their name. You can load classes with calling them on top of your codes.","title":"How to load and use classes?"},{"location":"classes/#step-by-step-define-method","text":"We include jsondb file witch automatically load classes by their definition on codes! <?php //including composer autoload include 'vendor/autoload.php' ; We define class on top of codes. (For example : USER ) <?php // In this case we use the original name of class. use JSONDB\\request\\user ; // In other case you can set specific name for class usage in your code! use JSONDB\\request\\user as account ; We call to class defined on top of code. <?php // Call class we defined with original name $user = new user ( $username , $password ); // Call class we defined with specific name $user = new account ( $username , $password ); Now we can call any function from class and use it. <?php var_dump ( $user -> login ()); var_dump ( $user -> get ( 'lastLogin' )); ...","title":"Step By Step - Define Method"},{"location":"classes/#step-by-step-direct-method","text":"We include jsondb file witch automatically load classes by calling them on codes! <?php //including composer autoload include 'vendor/autoload.php' ; We call to class with full namespace. <?php // Call class directly with full namespace $user = new JSONDB\\request\\user ( $username , $password ); Now we can call any function from class and use it. <?php var_dump ( $user -> login ()); var_dump ( $user -> get ( 'lastLogin' )); ...","title":"Step By Step - Direct Method"},{"location":"classes/#list-of-classes","text":"Class Parameter Description CONNECT $server_type , $address , $port , $timeout , $proxy string , string , int , int , array Create a connection from library to jsondb server/host by curl USER $username , $password , $output string , string , string / null Send user section request to jsondb server/host by curl DATABASE $output string / null Send database section request to jsondb server/host by curl BASE $output string / null Send base section request to jsondb server/host by curl DATACENTER $output string / null Send datacenter section request to jsondb server/host by curl","title":"List of Classes"},{"location":"classes/#jsondblibconnect","text":"Info This class is only for verify the server and create connection to server. Other classes don't work without accepting and connecting to server by this class! Functions Parameters Description ------- ----------------- ------------------------------------------","title":"JSONDB\\lib\\connect"},{"location":"classes/#jsondbrequestuser","text":"Functions Parameters Description rapid_login $save_session boolean Send a rapid login request to jsondb server/host. login $save_session boolean Send a login request to jsondb server/host. In this method of login it takes a little more time to login continue $session_id string / null Continue last login using last session id or entered session id terminate ---------------------- Terminate current session id (if you use this function you must login again) update $what , $set , $username string / array , string / array , string / null Update current or another user info get $what string / array Get current user info create $username , $password , $type , $active string , string , string , boolean Get current user info delete $username string Delete a user","title":"JSONDB\\request\\user"},{"location":"classes/#jsondbrequestdatabase","text":"Functions Parameters Description select $name string Select a database build $name , $maxsize , $maxbase , $users , $comment , $encrypt , $select string , integer , integer , array / null , string / null , boolean , boolean Build a new database modify $what , $set string / array , string / array Modify database setting obtain $what string / array Obtain database setting delete $what , $set , $username string / array , string / array , string / null Delete current selected database clean $what string / array Clean current selected database export $save_file , $path_to_save boolean , string / null Export current selected database import $source string Import a database","title":"JSONDB\\request\\database"},{"location":"classes/#jsondbrequestbase","text":"Functions Parameters Description select $name string Select a base create $name , $maxrecord , $comment , $encrypt , $select string , integer , string / null , boolean , boolean Create a new base modify $what , $set string / array , string / array Modify base setting obtain $what string / array Obtain base setting delete $what , $set , $username string / array , string / array , string / null Delete current selected base clean $what string / array Clean current selected base export $save_file , $path_to_save boolean , string / null Export current selected base import $source string Import a base","title":"JSONDB\\request\\base"},{"location":"classes/#jsondbrequestdatacenter","text":"Functions Parameters Description replace $object , $value , $where_object , $where_value , $limit string / array , string / array , string / array / null , string / array / null , integer / null Replace/add data to record(s) receive $object , $where_object , $where_value , $limit string / array , string / array / null , string / array / null , integer / null Receive data from record(s) add $object , $value string / array , string / array Add a record delete $id , $where_object , $where_value , $limit integer / array / string , string / array / null , string / array / null , integer / null Delete record(s) remove $object , $where_object , $where_value , $limit string / array , string / array / null , string / array / null , integer / null Remove data from record(s)","title":"JSONDB\\request\\datacenter"},{"location":"functions/","text":"Functions \u00b6 Here we told about usage of classes functions and their parameters. SHORTLY : Full document of how to use and pass parameters of classes functions! How to pass class parameters? \u00b6 First we have defined a comment for each parameter and we told type of value can be pass in this parameter else you can find any function of any class parameter in THIS PAGE JSONDB\\request\\user \u00b6 USER::RAPID_LOGIN() \u00b6 Function Return Description rapid_login string Send a rapid login request to jsondb server/host. Parameters Type Description $save_session string Should library save your session created for next times Note If request successfully session id returned else error returned witch depends on your output selection in illuminating class USER::LOGIN() \u00b6 Function Return Description login array / json / object Send a login request to jsondb server/host. Parameters Type Description $save_session string Should library save your session created for next times USER::CONTINUE() \u00b6 Function Return Description continue string Continue last login using last session id or entered session id Parameters Type Description $session_id string If set this param library use it for each request and login else it will be check any valid session id saved from last requests USER::TERMINATE() \u00b6 Function Return Description terminate array / json / object terminate current session (if you use this function you must login again) Parameters Type Description ----------------- ----------------- ---------------------------------- USER::UPDATE() \u00b6 Function Return Description update array / json / object Update current or another user info Parameters Type Description $what string / array Info you want to update it $set string / array Value you want to set to that info $username string If you want to update another user info (you must have higher permission than target user) USER::GET() \u00b6 Function Return Description get array / json / object Get current user info Parameters Type Description $what string / array Info you want to get it USER::CREATE() \u00b6 Function Return Description create array / json / object Create a new user Parameters Type Description $username string JSONDB account username $password string JSONDB account password $type string Permission type of new user ('admin','root') $active boolean Should user be active or disable USER::DELETE() \u00b6 Function Return Description delete array / json / object Delete a user Parameters Type Description $username string Username of that user JSONDB\\request\\database \u00b6 DATABASE::SELECT() \u00b6 Function Return Description select array / json / object Select a database Parameters Type Description $name string Name of database DATABASE::BUILD() \u00b6 Function Return Description build array / json / object Build a new database Parameters Type Description $name string Name of database $maxsize integer Limit max size of database in kilobyte $maxbase integer Limit max base database allowed to have $users array / null An array of users have access too this database $comment string / null Comment of new database $encrypt boolean Should database be encrypted $select boolean Should database be selected after built DATABASE::MODIFY() \u00b6 Function Return Description modify array / json / object Modify database setting Parameters Type Description $what string / array Setting you want to modify it $set string / array Value you want to set to that setting DATABASE::OBTAIN() \u00b6 Function Return Description obtain array / json / object Obtain database setting Parameters Type Description $what string / array Setting you want to obtain it DATABASE::DELETE() \u00b6 Function Return Description delete array / json / object Delete current selected database Parameters Type Description ----------------- ----------------- ---------------------------------- DATABASE::CLEAN() \u00b6 Function Return Description clean array / json / object Clean current selected database Parameters Type Description ----------------- ----------------- ---------------------------------- DATABASE::EXPORT() \u00b6 Function Return Description export array / json / object Export current selected database Parameters Type Description $save_file boolean Should save exported database file $path_to_save string Path to directory exported database file should save DATABASE::IMPORT() \u00b6 Function Return Description import array / json / object Import a database Parameters Type Description $source string Json encoded format exported database JSONDB\\request\\base \u00b6 BASE::SELECT() \u00b6 Function Return Description select array / json / object Select a base Parameters Type Description $name string Name of base BASE::BUILD() \u00b6 Function Return Description build array / json / object Create a new base Parameters Type Description $name string Name of new base $maxrecord integer Limit max records count of base $comment string / null Comment of new database $encrypt boolean Should database be encrypted $select boolean Should database be selected after built BASE::MODIFY() \u00b6 Function Return Description modify array / json / object Modify base setting Parameters Type Description $what string / array Setting you want to modify it $set string / array Value you want to set to that setting BASE::OBTAIN() \u00b6 Function Return Description obtain array / json / object Obtain base setting Parameters Type Description $what string / array Setting you want to obtain it BASE::DELETE() \u00b6 Function Return Description delete array / json / object Delete current selected base Parameters Type Description ----------------- ----------------- ---------------------------------- BASE::CLEAN() \u00b6 Function Return Description clean array / json / object Clean current selected base Parameters Type Description ----------------- ----------------- ---------------------------------- BASE::EXPORT() \u00b6 Function Return Description export array / json / object Export current selected base Parameters Type Description $save_file boolean Should save exported base file $path_to_save string Path to directory exported base file should save BASE::IMPORT() \u00b6 Function Return Description import array / json / object Import a base Parameters Type Description $source string Json encoded format exported base JSONDB\\request\\datacetner \u00b6 DATACENTER::REPLACE() \u00b6 Function Return Description replace array / json / object Replace/add data to record(s) Parameters Type Description $object string/array Name of data you want to add/update to record(s) $value string/array Value of data you want to add/update to record(s) $where_object string / array / null Filter records data name $where_value string / array / null Filter records data value $limit integer/null Limit number of records should update DATACENTER::RECEIVE() \u00b6 Function Return Description receive array / json / object Receive data from record(s) Parameters Type Description $object string/array Name of data you want to receive from record(s) $where_object string / array / null Filter records data name $where_value string / array / null Filter records data value $limit integer/null Limit number of records should receive DATACENTER::ADD() \u00b6 Function Return Description add array / json / object Add a record Parameters Type Description $object string/array Name of data(s) you want to add $value string/array Value of data(s) you want to add DATACENTER::DELETE() \u00b6 Function Return Description delete array / json / object Delete record(s) Parameters Type Description $id integer / array / string Id of record(s) you want to delete (if you want to delete all or delete by filtering set \"* \") $where_object string / array / null Filtering records by data name $where_value string / array / null Filtering records by data value $limit integer / null Limit number of records should delete DATACENTER::REMOVE() \u00b6 Function Return Description remove array / json / object Remove data from record(s) Parameters Type Description $object string/array Name of data you want to remove from record(s) $where_object string / array / null Filter records data name $where_value string / array / null Filter records data value $limit integer/null Limit number of records should receive Questions \u00b6","title":"Functions"},{"location":"functions/#functions","text":"Here we told about usage of classes functions and their parameters. SHORTLY : Full document of how to use and pass parameters of classes functions!","title":"Functions"},{"location":"functions/#how-to-pass-class-parameters","text":"First we have defined a comment for each parameter and we told type of value can be pass in this parameter else you can find any function of any class parameter in THIS PAGE","title":"How to pass class parameters?"},{"location":"functions/#jsondbrequestuser","text":"","title":"JSONDB\\request\\user"},{"location":"functions/#userrapid_login","text":"Function Return Description rapid_login string Send a rapid login request to jsondb server/host. Parameters Type Description $save_session string Should library save your session created for next times Note If request successfully session id returned else error returned witch depends on your output selection in illuminating class","title":"USER::RAPID_LOGIN()"},{"location":"functions/#userlogin","text":"Function Return Description login array / json / object Send a login request to jsondb server/host. Parameters Type Description $save_session string Should library save your session created for next times","title":"USER::LOGIN()"},{"location":"functions/#usercontinue","text":"Function Return Description continue string Continue last login using last session id or entered session id Parameters Type Description $session_id string If set this param library use it for each request and login else it will be check any valid session id saved from last requests","title":"USER::CONTINUE()"},{"location":"functions/#userterminate","text":"Function Return Description terminate array / json / object terminate current session (if you use this function you must login again) Parameters Type Description ----------------- ----------------- ----------------------------------","title":"USER::TERMINATE()"},{"location":"functions/#userupdate","text":"Function Return Description update array / json / object Update current or another user info Parameters Type Description $what string / array Info you want to update it $set string / array Value you want to set to that info $username string If you want to update another user info (you must have higher permission than target user)","title":"USER::UPDATE()"},{"location":"functions/#userget","text":"Function Return Description get array / json / object Get current user info Parameters Type Description $what string / array Info you want to get it","title":"USER::GET()"},{"location":"functions/#usercreate","text":"Function Return Description create array / json / object Create a new user Parameters Type Description $username string JSONDB account username $password string JSONDB account password $type string Permission type of new user ('admin','root') $active boolean Should user be active or disable","title":"USER::CREATE()"},{"location":"functions/#userdelete","text":"Function Return Description delete array / json / object Delete a user Parameters Type Description $username string Username of that user","title":"USER::DELETE()"},{"location":"functions/#jsondbrequestdatabase","text":"","title":"JSONDB\\request\\database"},{"location":"functions/#databaseselect","text":"Function Return Description select array / json / object Select a database Parameters Type Description $name string Name of database","title":"DATABASE::SELECT()"},{"location":"functions/#databasebuild","text":"Function Return Description build array / json / object Build a new database Parameters Type Description $name string Name of database $maxsize integer Limit max size of database in kilobyte $maxbase integer Limit max base database allowed to have $users array / null An array of users have access too this database $comment string / null Comment of new database $encrypt boolean Should database be encrypted $select boolean Should database be selected after built","title":"DATABASE::BUILD()"},{"location":"functions/#databasemodify","text":"Function Return Description modify array / json / object Modify database setting Parameters Type Description $what string / array Setting you want to modify it $set string / array Value you want to set to that setting","title":"DATABASE::MODIFY()"},{"location":"functions/#databaseobtain","text":"Function Return Description obtain array / json / object Obtain database setting Parameters Type Description $what string / array Setting you want to obtain it","title":"DATABASE::OBTAIN()"},{"location":"functions/#databasedelete","text":"Function Return Description delete array / json / object Delete current selected database Parameters Type Description ----------------- ----------------- ----------------------------------","title":"DATABASE::DELETE()"},{"location":"functions/#databaseclean","text":"Function Return Description clean array / json / object Clean current selected database Parameters Type Description ----------------- ----------------- ----------------------------------","title":"DATABASE::CLEAN()"},{"location":"functions/#databaseexport","text":"Function Return Description export array / json / object Export current selected database Parameters Type Description $save_file boolean Should save exported database file $path_to_save string Path to directory exported database file should save","title":"DATABASE::EXPORT()"},{"location":"functions/#databaseimport","text":"Function Return Description import array / json / object Import a database Parameters Type Description $source string Json encoded format exported database","title":"DATABASE::IMPORT()"},{"location":"functions/#jsondbrequestbase","text":"","title":"JSONDB\\request\\base"},{"location":"functions/#baseselect","text":"Function Return Description select array / json / object Select a base Parameters Type Description $name string Name of base","title":"BASE::SELECT()"},{"location":"functions/#basebuild","text":"Function Return Description build array / json / object Create a new base Parameters Type Description $name string Name of new base $maxrecord integer Limit max records count of base $comment string / null Comment of new database $encrypt boolean Should database be encrypted $select boolean Should database be selected after built","title":"BASE::BUILD()"},{"location":"functions/#basemodify","text":"Function Return Description modify array / json / object Modify base setting Parameters Type Description $what string / array Setting you want to modify it $set string / array Value you want to set to that setting","title":"BASE::MODIFY()"},{"location":"functions/#baseobtain","text":"Function Return Description obtain array / json / object Obtain base setting Parameters Type Description $what string / array Setting you want to obtain it","title":"BASE::OBTAIN()"},{"location":"functions/#basedelete","text":"Function Return Description delete array / json / object Delete current selected base Parameters Type Description ----------------- ----------------- ----------------------------------","title":"BASE::DELETE()"},{"location":"functions/#baseclean","text":"Function Return Description clean array / json / object Clean current selected base Parameters Type Description ----------------- ----------------- ----------------------------------","title":"BASE::CLEAN()"},{"location":"functions/#baseexport","text":"Function Return Description export array / json / object Export current selected base Parameters Type Description $save_file boolean Should save exported base file $path_to_save string Path to directory exported base file should save","title":"BASE::EXPORT()"},{"location":"functions/#baseimport","text":"Function Return Description import array / json / object Import a base Parameters Type Description $source string Json encoded format exported base","title":"BASE::IMPORT()"},{"location":"functions/#jsondbrequestdatacetner","text":"","title":"JSONDB\\request\\datacetner"},{"location":"functions/#datacenterreplace","text":"Function Return Description replace array / json / object Replace/add data to record(s) Parameters Type Description $object string/array Name of data you want to add/update to record(s) $value string/array Value of data you want to add/update to record(s) $where_object string / array / null Filter records data name $where_value string / array / null Filter records data value $limit integer/null Limit number of records should update","title":"DATACENTER::REPLACE()"},{"location":"functions/#datacenterreceive","text":"Function Return Description receive array / json / object Receive data from record(s) Parameters Type Description $object string/array Name of data you want to receive from record(s) $where_object string / array / null Filter records data name $where_value string / array / null Filter records data value $limit integer/null Limit number of records should receive","title":"DATACENTER::RECEIVE()"},{"location":"functions/#datacenteradd","text":"Function Return Description add array / json / object Add a record Parameters Type Description $object string/array Name of data(s) you want to add $value string/array Value of data(s) you want to add","title":"DATACENTER::ADD()"},{"location":"functions/#datacenterdelete","text":"Function Return Description delete array / json / object Delete record(s) Parameters Type Description $id integer / array / string Id of record(s) you want to delete (if you want to delete all or delete by filtering set \"* \") $where_object string / array / null Filtering records by data name $where_value string / array / null Filtering records by data value $limit integer / null Limit number of records should delete","title":"DATACENTER::DELETE()"},{"location":"functions/#datacenterremove","text":"Function Return Description remove array / json / object Remove data from record(s) Parameters Type Description $object string/array Name of data you want to remove from record(s) $where_object string / array / null Filter records data name $where_value string / array / null Filter records data value $limit integer/null Limit number of records should receive","title":"DATACENTER::REMOVE()"},{"location":"functions/#questions","text":"","title":"Questions"},{"location":"getting-started/","text":"Getting Started \u00b6 Getting started with JSONDB LV is so easy. Any methods have the same name like JSONDB server methods and accepts the same parameter like JSONDB server and returned the same server response with three types of response supported We may that you have \u00b6 installed this library before ( Reference ) A ready to use JSONDB server with the following credentials installed : Address: jsondb.example.com Port: 443 (default https port) Username : root Password: admin1234 Start with basics \u00b6 Create a connection to server \u00b6 installed manually if installed library manually, Replace line 3 with require __DIR__.'jsondb/jsondb.class.php'; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php //requiring composer autoload require __DIR__ . '/vendor/autoload.php' ; //load class from reference use JSONDB\\lib\\connect ; define ( 'SERVER_TYPE' , 'hv' ); define ( 'SERVER_ADDRESS' , 'https://jsondb.example.com' ); define ( 'SERVER_PORT' , '443' ); define ( 'SERVER_USERNAME' , 'root' ); define ( 'SERVER_PASSWORD' , 'admin1234' ); //create connection handler (It will be create connection to server automatically) new connect ( SERVER_TYPE , SERVER_ADDRESS , SERVER_PORT ); Login to server \u00b6 1 2 3 4 5 6 7 8 9 <?php //load class from reference use JSONDB\\request\\user ; //create user handler $user = new user ( SERVER_USERNAME , SERVER_PASSWORD ); //send a login request to server with credentials entered in user handler $user -> login (); build or select database \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 <?php //load class from reference use JSONDB\\request\\database ; //create database handler $db = new database (); //building a database $db -> build ( $name , $maxsize , $maxbase ); //selecting a database builded before (you should have access to database) $db -> select ( $name ); build or select base \u00b6 What is base? It's a part of your database used for separate records like \"table\" in MYSQL 1 2 3 4 5 6 7 8 9 10 11 12 <?php //load class from reference use JSONDB\\request\\base ; //create base handler $db = new base (); //building a base $db -> create ( $name , $maxrecord ); //selecting a base builded before (you should have access to base) $db -> select ( $name ); Records management (Add,Update,Get,...) \u00b6 What is record? All data you save in database will be save in records like \"row\" in MYSQL. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php //load class from reference use JSONDB\\request\\datacenter ; //create datacenter handler $dc = new datacenter (); //adding a record to selected database and base $dc -> add ( $object , $value ); //receiving data stored in records $dc -> receive ( $object , $where_object , $where_value ); //replacing new data with last data stored in records $dc -> replace ( $object , $value , $where_object , $where_value ); Full Documentation \u00b6 You can also use these references to see full documentation : Classes Functions Requests Responses If you want a specific method documents use search box on header!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Getting started with JSONDB LV is so easy. Any methods have the same name like JSONDB server methods and accepts the same parameter like JSONDB server and returned the same server response with three types of response supported","title":"Getting Started"},{"location":"getting-started/#we-may-that-you-have","text":"installed this library before ( Reference ) A ready to use JSONDB server with the following credentials installed : Address: jsondb.example.com Port: 443 (default https port) Username : root Password: admin1234","title":"We may that you have"},{"location":"getting-started/#start-with-basics","text":"","title":"Start with basics"},{"location":"getting-started/#create-a-connection-to-server","text":"installed manually if installed library manually, Replace line 3 with require __DIR__.'jsondb/jsondb.class.php'; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php //requiring composer autoload require __DIR__ . '/vendor/autoload.php' ; //load class from reference use JSONDB\\lib\\connect ; define ( 'SERVER_TYPE' , 'hv' ); define ( 'SERVER_ADDRESS' , 'https://jsondb.example.com' ); define ( 'SERVER_PORT' , '443' ); define ( 'SERVER_USERNAME' , 'root' ); define ( 'SERVER_PASSWORD' , 'admin1234' ); //create connection handler (It will be create connection to server automatically) new connect ( SERVER_TYPE , SERVER_ADDRESS , SERVER_PORT );","title":"Create a connection to server"},{"location":"getting-started/#login-to-server","text":"1 2 3 4 5 6 7 8 9 <?php //load class from reference use JSONDB\\request\\user ; //create user handler $user = new user ( SERVER_USERNAME , SERVER_PASSWORD ); //send a login request to server with credentials entered in user handler $user -> login ();","title":"Login to server"},{"location":"getting-started/#build-or-select-database","text":"1 2 3 4 5 6 7 8 9 10 11 12 <?php //load class from reference use JSONDB\\request\\database ; //create database handler $db = new database (); //building a database $db -> build ( $name , $maxsize , $maxbase ); //selecting a database builded before (you should have access to database) $db -> select ( $name );","title":"build or select database"},{"location":"getting-started/#build-or-select-base","text":"What is base? It's a part of your database used for separate records like \"table\" in MYSQL 1 2 3 4 5 6 7 8 9 10 11 12 <?php //load class from reference use JSONDB\\request\\base ; //create base handler $db = new base (); //building a base $db -> create ( $name , $maxrecord ); //selecting a base builded before (you should have access to base) $db -> select ( $name );","title":"build or select base"},{"location":"getting-started/#records-management-addupdateget","text":"What is record? All data you save in database will be save in records like \"row\" in MYSQL. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php //load class from reference use JSONDB\\request\\datacenter ; //create datacenter handler $dc = new datacenter (); //adding a record to selected database and base $dc -> add ( $object , $value ); //receiving data stored in records $dc -> receive ( $object , $where_object , $where_value ); //replacing new data with last data stored in records $dc -> replace ( $object , $value , $where_object , $where_value );","title":"Records management (Add,Update,Get,...)"},{"location":"getting-started/#full-documentation","text":"You can also use these references to see full documentation : Classes Functions Requests Responses If you want a specific method documents use search box on header!","title":"Full Documentation"},{"location":"installation/","text":"Requirements \u00b6 PHP version 8.1 ( #download-php8.1 ) PHP curl extension ( #installation-docs ) PHP zip extension ( #installation-docs ) PHP json extension ( #installation-docs ) Stable network connection (for connection to JSONDB server) We have provided there are two ways to install and use this library : install with composer \u00b6 Warning Your composer version must be compilable with php8.1 else you will get error from composer! You should install composer by instructions defined in https://getcomposer.org/download/ Open terminal/cmd in your project directory and require package using the following command. composer require estaheri/jsondb-lv if you wanted to install dev version use composer require estaheri/jsondb-lv:dev command After composer installed library you should include composer autoload file in you php codes. include __DIR__.'/vendor/autoload.php'; Now you have installed JSONDB-LV and you can start using it install manually \u00b6 Download the latest release from github repository. Download latest release Extract Downloaded release into your project directory. Now you see a folder jsondb in your project. all source files of library is in this folder. If you open library folder (jsondb) you see a file jsondb.class.php in it Include jsondb.class.php file to your codes. include __DIR__.'/jsondb/jsondb.class.php'; Now you have installed JSONDB-LV and you can start using it","title":"Installation"},{"location":"installation/#requirements","text":"PHP version 8.1 ( #download-php8.1 ) PHP curl extension ( #installation-docs ) PHP zip extension ( #installation-docs ) PHP json extension ( #installation-docs ) Stable network connection (for connection to JSONDB server) We have provided there are two ways to install and use this library :","title":"Requirements"},{"location":"installation/#install-with-composer","text":"Warning Your composer version must be compilable with php8.1 else you will get error from composer! You should install composer by instructions defined in https://getcomposer.org/download/ Open terminal/cmd in your project directory and require package using the following command. composer require estaheri/jsondb-lv if you wanted to install dev version use composer require estaheri/jsondb-lv:dev command After composer installed library you should include composer autoload file in you php codes. include __DIR__.'/vendor/autoload.php'; Now you have installed JSONDB-LV and you can start using it","title":"install with composer"},{"location":"installation/#install-manually","text":"Download the latest release from github repository. Download latest release Extract Downloaded release into your project directory. Now you see a folder jsondb in your project. all source files of library is in this folder. If you open library folder (jsondb) you see a file jsondb.class.php in it Include jsondb.class.php file to your codes. include __DIR__.'/jsondb/jsondb.class.php'; Now you have installed JSONDB-LV and you can start using it","title":"install manually"}]}